#+STARTUP: latexpreview

#+OPTIONS: H:3
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: *:t

#+BEAMER_THEME: Berkeley
#+BEAMER_COLOR_THEME: seahorse
#+BEAMER_INNER_THEME: rectangles

#+LATEX_CLASS: beamer_lecture
#+LaTeX_CLASS_OPTIONS: [t, aspectratio=169]

#+TITLE: フレームワーク開発特論（2016）
#+AUTHOR: 中鉢 欣秀
#+DATE:

#+LATEX_HEADER: \institute[AIIT]{産業技術大学院大学(AIIT)}

* 第1章 この授業について
** 導入
*** はじめに
**** 自己紹介
     - [[https://github.com/ychubachi/enpit/blob/master/slides/self_introduction.org][enpit/self_introduction.org at master · ychubachi/enpit]]
**** 資料の入手
     - 資料はGitHubからダウンロードできる
       [[https://github.com/ychubachi/framework_development][ychubachi/framework_development]]
     - 随時更新するので watch しておくとよい
*** 授業の計画
**** スケジュールの調整
     - 基本的には資料の通り進めるが，
       計画の変更はあり得る
**** 休講・補講
     - 6/25（予定）

** 学習目的・目標
*** この授業の目的
    - 一言で言えば「RubyでGemが作れるようになる」こと
      - 再利用可能なコンポーネント開発の概念的理解を行う
    - 高度なフレームワークを使いこなせるようになるために基本技術を押さえる
      - 高度なフレームワーク（Rails等）は直接は取り上げない
*** この授業の目標
    - Rubyで実際にコーデングを行い，コンポーネントを開発できる
    - Rubyのテスト技術について学ぶ
    - RubyGemsに公開する方法
    - Git/GitHubを用い，開発の効率の向上・成果物の公開などができる

** 授業の方法
*** この授業で用いる資料
    - この授業で取り上げる資料は，開発コミュニティが公開している
      Webページを中心に解説する
    - エンジニアは英語の原典を読めなくてはならないので，英語のページ
      を見ながら解説する

*** Git/GitHubの活用
    - GitHubのアカウントを作成しておくこと
    - ソースコードを作成する課題は，GitHubにも登録してもらうことがある

*** 仮想化環境の準備
  - Rubyの開発環境
    - enPiTの仮想環境を利用
  - 目標
    - 「Vagrant」を利用できるようにする
  - 最新版のバージョン
    - VirtualBox 5.0.22
    - Vagrant 1.8.4

*** インストール方法（Windows）
    - 資料
      - [[https://github.com/ychubachi/enpit/blob/master/slides/preparation.org][enpit/preparation.org at master · ychubachi/enpit]]
    - 動画を参照
      - http://youtu.be/kePqg8dCgJM
#    - 注意
#      - 動画の視聴及び作業のために2時間程度かかる

*** インストール方法（Mac）
**** Homebrewのインストール
    - [[http://brew.sh/index.html][Homebrew — The missing package manager for OS X]]
    - [[http://caskroom.io/][Homebrew Cask]]

**** VBとVagrantのインストール

#+begin_src bash
brew cask install virtualbox
brew cask install vagrant
#+end_src

*** 仮想化環境の設定
**** 内容
     - enPiT用に作成したVagrantのboxファイルを入手して
       実行できるようにする
     - Vagrantのバージョンは最新版にしておく
     - Vagrantのインストール後，次のコマンドでインストール可能

**** コマンド
#+begin_src bash
vagrant init ychubachi/enpit
#+end_src

*** 仮想環境利用時の注意事項
    - 仮想環境は簡単に削除できる
      - 保存したいファイルは必ずクラウド（GitHub）や，
	Host側のファイルシステムに残すこと
    - 仮想環境の更新
      - ychubachi/enpit は授業期間中でもバージョンアップする可能性がある
      - この場合も，Guest 側のファイルは消えるので注意
    - ツールのバージョン
      - vagrant，VirtualBox を以前にインストールしたことのある場合，
	最新のバージョンに更新しておくこと

** 演習課題
*** 課題1-1
**** 開発環境の構築
     - 演習用仮想化環境を用意する
     - 資料と動画を参照
**** 作業内容
     - VirtualBox と Vagrantをインストールする
       - [[https://www.virtualbox.org/][Oracle VM VirtualBox]]
       - [[https://www.vagrantup.com/][Vagrant]]
*** 課題1-2
**** 開発環境の構築
     - enPiT仮想化環境をインストールする
**** コマンド

#+begin_src bash
vagrant init ychubachi/enpit
vagrant up
vagrant ssh
#+end_src

*** 課題1-3（上級者向け）
**** 仮想環境自体の構築
     - enPiT 用の Vagarnt の Box 自体を作成するスクリプト等は
       次のリポジトリにある
       - https://github.com/ychubachi/vagrant_enpit
**** 内容のレビュー
     - Chef等をインストールして Box を作成してみよ
     - 突っ込み所は多いと思われるので，改善点に気がついたら issue にあげよ
     - Pull request も歓迎する

* 第2章 Ruby自体に関すること
** Rubyのバージョン指定
*** Rubyのバージョン
     - Rubyには様々なバージョンがある
       - 最新の安定版: Ruby 2.2.2
       - 1.8.7，1.9.2はサポート終了
     - 日々激しくバージョンアップされる
     - これら以外にも，Javaや.NET Framework上で動作するものなど多数．
*** 開発時の混乱
    - 開発プロジェクトによって，異なるバージョンのRubyが用いられる
    - 複数の開発プロジェクトに参加する開発者が，
      毎回手動でバージョンを変更するのは困難であるし，
      トラブルの原因となる
*** Rbenvについて
**** 概要
     - バージョンの異なる複数のRubyを管理するツールであり，
       主要なエコシステムの一部
     - プラグインを追加することで，インストールも自動化できる
**** GitHub
    - [[https://github.com/sstephenson/rbenv][sstephenson/rbenv]]
**** RVMとの比較
    - [[https://github.com/sstephenson/rbenv/wiki/Why-rbenv%3F][Why rbenv? · sstephenson/rbenv Wiki]]
** 動的な言語としてのRuby
*** RubyのREPL
**** irbとは
- irb = Interactive Ruby
  - REPL
- Rubyのコードが実行できる
  - 構文や動作の確認に便利
**** 起動と終了
- 起動するには irb
- 終了するには exit （または Ctrl-d）
*** Rubyは動的な言語
**** 機能の追加の例
#+begin_src ruby
require 'pp'
# pp ENV
#+end_src

**** 機能の置換の例
#+begin_src ruby
require 'mathn'
# 10/3
#+end_src

**** 再起動すると？
     - 拡張は初期化される

*** 参考文献
- [[http://postd.cc/sick-of-ruby-dynamic-typing-side-effects-object-oriented-programming/][Rubyにはウンザリ！動的型付け、副作用、およびオブジェクト指向プログラミング全般からの考察 | プログラミング | POSTD]]

*** ロードパス
**** $LOAD_PATH
     - 既存のライブラリや別ファイルを読み込む際，
       検索の対象となる =PATH=
**** $LOADED_FEATURES
     - 一度 require されたファイルは
       $LOADED_PEATURES に追加される

** 演習課題
*** 課題2-1 別なRubyバージョンのインストール
     - =rbenv= を用いて，異なるバージョンのRubyをインストールする
*** 課題2-2 Rubyのバージョンを切り替える
    - =rbenv= を用い， =ruby=  のバージョンを切り替える
*** 課題2-3 irbを使ってみよう
    - =irb= を用い， =ruby= の様々な構文を試しなさい
*** 課題2-4 標準ライブラリ
    - 次のような標準ライブラリを使用してみなさい
      - yaml
      - set
      - net/http
      - erb
*** 課題2-5 （上級） pryについて
    - =irb= と似たツールに =pry= がある
    - これを使用してみて =irb= との差異を調べなさい
* 第3章 RubyGemsの概要と周辺のツール群
** RubyのGemとは
*** Rubyによるコンポーネント
    - Rubyには，再利用可能なコンポーネントを
      取り扱う仕組みとしてGemがある
    - 資料
      - [[http://guides.rubygems.org/][RubyGems Guides]]
*** 基本的なコマンド
    - =gem= コマンドは，Rubyでコンポーネントを開発したり，
      配布をしたりする等の際に利用するコマンド
    - 後に解説する =bundler= コマンドの基盤
    - 資料
      - [[http://guides.rubygems.org/rubygems-basics/][RubyGems Basics - RubyGems Guides]]
** RubyGemsの解説(1)
*** Ruby Gemsのガイド
    - [[http://guides.rubygems.org/what-is-a-gem/][What is a gem? - RubyGems Guides]]
    - [[http://guides.rubygems.org/make-your-own-gem/][Make your own gem - RubyGems Guides]]
    - [[http://guides.rubygems.org/gems-with-extensions/][Gems with Extensions - RubyGems Guides]]
      - C言語拡張（省略）
** RubyGemsの解説(2)
*** Ruby Gemsのガイド
    - [[http://guides.rubygems.org/name-your-gem/][Name your gem - RubyGems Guides]]
    - [[http://guides.rubygems.org/publishing/][Publishing your gem - RubyGems Guides]]
    - [[http://guides.rubygems.org/security/][Security - RubyGems Guides]]
      - セキュリティ（省略）
    - [[http://guides.rubygems.org/patterns/][Patterns - RubyGems Guides]]
** 演習課題
*** 課題3-1
     - 下記のガイドに記されたサンプルを実行し，
       =gem= コマンドの基本的な使い方を学ぶ
     - [[http://guides.rubygems.org/rubygems-basics/][RubyGems Basics - RubyGems Guides]]
     - ※ri及びserverは飛ばしてよい
*** 課題3-2
     - gemをダウンロードして中身を見てみる
     - =search=, =fetch=,  =unpack= などのコマンドを活用する
*** 課題3-3 RubyGems.orgにアカウントを作成
     - RubyGems.orgにアカウントを作成しなさい
     - [[https://rubygems.org/][RubyGems.org | your community gem host]]
       - 「sign up」リンクから作成する
*** 課題3-4 ガイドを参考にGemを作る
     - ガイドの解説に従い，"hola" Gemを作成しなさい
       - [[http://guides.rubygems.org/make-your-own-gem/][Make your own gem - RubyGems Guides]]
     - 演習用Gemの名前の付け方
       - hola_(username)
       - 括弧内はRubyGemsのユーザ名に置き換えよ
* 第4章 プロジェクトで利用するGemの管理
** プロジェクトとGem
*** プロジェクトごとに異なるGemの集合
    - 開発プロジェクトにおいて利用するGemは異なるばかりではなく，
      Gemのバージョンについても注意が必要である
    - Gemコマンドを直接用いてインストールする方法では，
      必要なGemを主導で管理しなくてはならないし，
      バージョンの異なるGemを用いる場合もある
** BundlerでGemを利用する
*** Bundlerについて
    - [[http://bundler.io/][Bundler: The best way to manage a Ruby application's gems]]
*** ドキュメントの解説
    - [[http://bundler.io/rationale.html][Why Bundler exists]]
    - [[https://github.com/sstephenson/rbenv/wiki/Understanding-binstubs][Understanding binstubs · sstephenson/rbenv Wiki]]
    - [[http://bundler.io/gemfile.html][Gemfile]]
*** bundleコマンドのインストール
**** bundleコマンド
     - =gem= と違い， =bundle= コマンドは標準ではインストールされていない．
**** Gemによるインストール方法
#+begin_src bash
gem install bundler
#+end_src
** BundlerによるGemの作成
*** ひな形の自動生成
**** ひな形の自動生成
    - [[http://bundler.io/v1.7/bundle_gem.html][Bundler: The best way to manage a Ruby application's gems]]
**** コマンド
#+begin_src bash
bundle gem my_gem_name
#+end_src

*** 雛形の内容

#+begin_src text
  .
  ├── .git
    <snip>
  ├── .gitignore
  ├── Gemfile
  ├── LICENSE.txt
  ├── README.md
  ├── Rakefile
  ├── lib
  │   ├── my_gem_name
  │   │   └── version.rb
  │   └── my_gem_name.rb
  └── my_gem_name.gemspec
#+end_src

*** 雛形のbuild
    - =*.gemspec= のTODOを外す（内容をきちんと書く）
    - =rake build= でbuildできる

*** =executable= の作成と注意
    - =bundle gem -b= で実行可能なスクリプトの雛形ができる
    - 実行属性を =chmod a+x= でつける
    - =bundle install --binstubs= を実行すると，上書きされるので注意
      - 手動で他のディレクトリ（ =/exe= ）に作成するほうが良い

*** Gemfileとgemspecの関係
    - Gemの依存関係のかき分け
      - Gemfile
	- =Gemfile= に =gemspec= メソッドがあれば， =.gemspec= 内のGem依存関係を解決する
      - *.gemspec
	- Gemを利用時に必要なGemを追加

*** COMMENT binstubs
    - rails 4以降，binstubsはgitに加えるように推奨されている
      - [[http://factore.ca/blog/250-safe-binstubs-with-rails][factor[e]]]

*** Bundlerと$LOAD_PATH
**** Bundlerと$LOAD_PATH
   - Bundlerはロードパスを適切に設定
**** ロードパスの設定の確認
   - bundle exec irb

*** Gem雛形の作成からの作業手順（まとめ）

最初の雛形の作成
#+begin_src bash
bundle gem ychubachi_helloworld
#+end_src

いまのままだとbuildできない
#+begin_src bash
bundle exec rake build # エラー発生
#+end_src

「ychubachi_helloworld.gemspec」の内容を編集する
- TODOを削除
- spec.homepageの行を削除
- # prevent から始まる7行を削除
#+begin_src bash
vi ychubachi_helloworld.gemspec # TODO: を削除
#+end_src

これでビルトできる
#+begin_src bash
bundle exec rake build # OK
#+end_src

Gemへの機能の追加。「lib/ychubachi_helloworld.rb」を編集する。

#+begin_src ruby
require "ychubachi_helloworld/version"

def greeting
  puts 'Hello World'
  puts YchubachiHelloworld::VERSION
end
#+end_src

機能の確認
#+begin_src bash
bin/console # 環境設定済みのirbの起動
greeting # 定義したメソッドの実行
#+end_src

** 演習課題
*** 4-1 Bundlerで簡単なGemを作ってみる
**** 課題
     - 簡単な計算を行うコマンドをGemとして作成しなさい．
     - 外部のGemを利用する場合は，
       gemspecファイルに依存関係を記述すること
**** 例
     - 生年月日と今の年月日から年齢を計算する
     - 身長と体重を入力して，BMIを出す
     - その他，各自で考えよ
*** 4-2 作成したGemをGitHubで公開する（省略）
**** 課題
    - 作成したGemのソースコードをGitHubに公開しなさい
      - =hub create= でGitHubのリポジトリを作成
      - =git add= ， =git commit= でコミット
      - =git push -u origin master= でGitHubに登録
**** 提出
    - GitHubのURLをLMSに提出する
*** 4-3 GemをRubyOrgに登録する
**** 課題
    - 作成したGemをRubyOrgに登録する
    - Gemの名前には，aiitのアカウント名を先頭につけること
      - a14???xx_name
**** 提出
     - RubyOrgのURL
* 第5章 Rakeによるタスクの実行
** Rakeの文書
*** ドキュメント
    - [[https://github.com/jimweirich/rake][jimweirich/rake]]
    - [[http://devblog.avdi.org/2014/04/21/rake-part-1-basics/][Rake Part 1: Files and Rules | Virtuous Code]]
    - [[http://nilquebe.blogspot.jp/2014/06/learn-advanced-rake-in-7-episodes.html][Nilquebe Blog: Rake Part 1: Files and Rules 翻訳]]

** 簡単なRakefileの例
*** タスクの定義
**** Rakefile
#+begin_src ruby
task :hello do
  puts 'do task hello!'
end
#+end_src

*** 説明を追加した例
**** Rakefile
#+begin_src ruby
desc 'say hello'
task :hello do
  puts 'do task hello!'
end
#+end_src

*** タスクの一覧
**** コマンド
#+begin_src bash
rake -T
#+end_src

*** Bundlerが自動生成するgem
**** Rakefile
#+begin_src ruby
require "bundler/gem_tasks"
#+end_src

**** タスクの定義
     - 実際のタスクは =bundler/gem_tasks= 内にある
     - なお， コードの在処は =gem which bundler= で確認できる

* 第6章 Rubyによる単体テスト
** Rubyによるテスト技法
*** 各種のテスト技法(1)
   - Minitest
     - Rubyに標準のテストツール
     - [[http://www.ruby-doc.org/stdlib-2.0/libdoc/minitest/rdoc/MiniTest.html][Module: MiniTest (Ruby 2.0.0)]]
   - RSpec
     - 広く普及しているテストツール
     - 「振る舞い駆動」
     - [[http://rspec.info/][RSpec.info: home]]
*** 各種のテスト技法(2)
   - Cucumber
     - [[http://cukes.info/][Cucumber - Making BDD fun]]
   - Turnip
     - [[https://github.com/jnicklas/turnip][jnicklas/turnip]]

** テストを含むGemの生成
*** bundle gemのオプション
**** minitestを使う場合
#+begin_src bash
bundle gem gem_minitest --test=minitest
#+end_src

*** minitest用のRakefile
**** Rakefile
#+begin_src ruby
require "bundler/gem_tasks"
require "rake/testtask"

Rake::TestTask.new(:test) do |t|
  t.libs << "test"
end

task :default => :test
#+end_src

*** test/の中身
**** ファイル
#+begin_src text
test
|-- minitest_helper.rb
`-- test_gem_minitest.rb
#+end_src
**** 内容
     - =minitest_helper.rb= :: テストを実行する際に必ず読み込まれる
     - =test_gem_minitest.rb= :: テストを書く場所

** minitestの書き方
*** minitestのドキュメント
**** ドキュメント
    - 英語版
      - [[http://ruby-doc.org/stdlib-2.1.0/libdoc/minitest/rdoc/MiniTest.html][Module: MiniTest (Ruby 2.1.0)]]
    - 日本語版
      - [[http://docs.ruby-lang.org/ja/2.1.0/library/minitest=2funit.html][library minitest/unit]]
*** Assertion
    - Assertionとは？
      - [[http://docs.ruby-lang.org/ja/2.1.0/class/MiniTest=3a=3aAssertions.html][module MiniTest::Assertions]]

** 演習課題
*** 6-1 Gemの作成
**** 課題
     - テストの演習をするためのGemを作成しなさい
**** コマンド

#+begin_src bash
  bundle gem minitest_practice --test=minitest
#+end_src

**** サンプルコード
     - [[https://github.com/ychubachi/minitest_sample][ychubachi/minitest_sample]]


*** 6-2 メソッドの作成(1)
**** 課題
     - 次の仕様に沿ったテストを作成しなさい
     - テストができたら，コードを書きなさい
**** 仕様
     - メソッド名 :: =odd?=
     - 内容 :: 整数を入力として受け取り，値が奇数ならば真を返す

*** 6-3 メソッドの作成(2)
**** 課題
     - 次の仕様に沿ったテストを作成しなさい
     - テストができたら，コードを書きなさい
**** 仕様
     - メソッド名 :: =check_number?=
     - 内容 :: 引数が0以外ではじまる4桁の数字であり，なおかつ，値が偶数ならば
       真を返す

*** 6-4 メソッドの作成(3)
**** 課題
     - 次の仕様に沿ったテストを作成しなさい
     - テストができたら，コードを書きなさい
**** 仕様
     - メソッド名 :: =enough_length?=
     - 内容 :: 文字列を受け取り，その長さが3文字以上，8文字以下であれば
       真を返す

*** 6-5 メソッドの作成(4)
**** 課題
     - 次の仕様に沿ったテストを作成しなさい
     - テストができたら，コードを書きなさい
**** 仕様
     - メソッド名 :: =divide=
     - 内容 :: 引数として割る数と割られる数を取り，割り算をした結果を返す．
       ただし，0で割り算をしたら例外を発生する

*** 6-6 メソッドの作成(5)
**** 課題
     - 次の仕様に沿ったテストを作成しなさい
     - テストができたら，コードを書きなさい
**** 仕様
     - メソッド名 :: =fizz_buzz=
     - 内容 :: 引数に数値を1つとる．3の倍数の時は”Fizz”を返す．
       5の倍数の時は”Buzz”を返す．3と5の公倍数のときは”FizzBuzz”を返す．

*** 6-7 メソッドの作成(6)
**** 課題
     - 次の仕様に沿ったテストを作成しなさい
     - テストができたら，コードを書きなさい
**** 仕様
     - 標準出力に「Hello」と表示するプログラムのテストと実装を行いなさい

*** 参考
**** サンプル
     - https://github.com/ychubachi/mini_test_practice

* 第7章 テスト自動化と統合テスト
** GitHubの準備
*** GitHubの設定と使用
**** GitHubによる公開
     - コンポーネント全体をGitで管理し、GitHubで公開する
**** GitHub への公開鍵登録など
     - github-connect.sh
     - 注意：画面が乱れたら再ログイン
**** GitHub用CLI
    - 演習用仮想環境には hub コマンドがインストール済み
      [[https://github.com/github/hub][github/hub]]
**** COMMENT Editorの変更
    - VIMにする方法
      git config --global core.editor "vim" 
*** Gitコマンドの基本
**** 基本的なコマンド
- 現在のリポジトリをGitHubで公開
  - git create
- 変更箇所をまとめて登録
  - git add .
- 登録した変更のコミット
  - git commit -m '<コミットメッセージ>'
- コミットのプッシュ
  - git push -u origin master
    - 2回目以降は「-u origin master」は不要

**** 補足: =git ls-files= について（Bundler）
    - gitにindexされているファイルの一覧
    - 新しいファイルは，ステージング領域にaddされると表示に加わる
    - =.gitignore= で無視するファイルを設定できる

** Guardによる方法
*** Guardとは？
   - =Guard= とは，ファイルの更新を監視して，更新があれば指定されたタスクを
     実行する仕組み
   - 詳細
     - [[https://github.com/guard/guard][guard/guard]]
*** MiniTestの自動化
    - Guardにはプラグイン機能がある
    - MiniTest用のプラグイン
      - [[https://github.com/guard/guard-minitest][guard/guard-minitest]]
    - .gemspecの最後の方に下記を追加してbundle install

#+begin_src ruby
  spec.add_development_dependency "guard"
  spec.add_development_dependency "guard-minitest"
#+end_src

*** Guardfileの作成
- Guardfileの生成

#+begin_src bash
bundle exec guard init
#+end_src

- Guardfileの当該箇所を次のとおり修正

#+begin_src ruby
  # with Minitest::Unit
  watch(%r{^test/(.*)\/?(.*)_test\.rb$})
  watch(%r{^lib/(.*/)?([^/]+)\.rb$})     { |m| "test/#{m[1]}#{m[2]}_test.rb" }
#+end_src

*** サンプル
    - Guard用の設定を行ったコード
      - [[https://github.com/ychubachi/mini_test_practice][ychubachi/mini_test_practice]]
** Travis CIによる方法
*** Travis CIとは？
    - GitHubと連携し，新たなコミットがGitHubにPushされたら
      自動でテスト（など）を行う機能
    - CI (continuous integration)
      - 継続的統合などと呼ばれる
*** Travis CIについて
    - https://travis-ci.org/
    - サンプルを実行する例
    - 設定は =.travis.yml= に書く
*** GitHubと連携する方法
    - 設定ファイル
      - =.travis.yml= は =bundle gem= コマンドを実行した段階で
	生成されている
    - Travis CIにログインする
      1. GitHubのリポジトリをTravis CIで検索する
      2. 検索結果にリポジトリがでてくる
      3. Acctivateする

*** コマンドで行う場合
      - =travis= コマンドをインストール
      - =travis enable= コマンドで連携開始

** 演習課題
*** 7-1 Guard
**** 課題
     - Guardを利用して，テストを自動化しなさい
*** 7-2 Travis CI
**** 課題
     - GitHubとTravis CIを連携させ，継続的統合を行いなさい
* 第8章 GitHubを用いた開発演習
- [[https://github.com/ychubachi/github_practice][ychubachi/github_practice: GitHub入門]] 参照
* 第9章 まとめ
** この授業で取り上げたこと
*** Rubyのエコシステム(1)
**** rbenv
     - Ruby そのもののバージョン管理
     - 言語のインストールも自動化
**** rake
     - 開発で必要なタスクの自動化
     - =Rakefile= に設定を書く

*** Rubyのエコシステム(2)
**** Gem
     - Rubyのコンポーネント開発
     - RubyGemsによる公開
**** bundler
     - Gemのダウンロードやロードパスの設定
     - Gemを開発するための機能もある

*** Rubyのエコシステム(3)
**** MiniTest
     - 単体テストのフレームワーク
     - RSpec等他のフレームワークも存在
**** Guard
     - テストの自動化
     - プラグインにより，他にも多くのタスクが自動化できる

*** 継続的統合
**** Travis CI
     - 様々な開発環境で利用できるCI環境
     - GitHubと連携する
     - Rubyの場合，Rakeのディフォルトのタスク（ =rake test= ）が実行される

*** GitHub
**** GitHub
     - GitHub の各種機能
     - ペア/グループによる開発演習

** 課題の提出方法
*** 課題提出について
**** 提出内容
    1. GitHubのURL（RubyGems.orgのURLは不要）
       - Gemの演習で作成したリポジトリ
       - ペア演習で作成したリポジトリ
       - グループ演習で作成したリポジトリ
    2. レポート
       - タイトル「この授業で学んだこと」（800字程度）
    3. 自己評価
       - 5段階評価でいくつくらいか（2以上合格）
**** 提出先と期限
     - 別途掲示板にて連絡

* COMMENT 次年度に向けて
** 授業の進め方
   - 2015年度は、第5、6章をまとめて行った
   - 次年度は統合して、後ろをずらす
     - 「Rakeによるタスクの実行とテスト」
** 補足資料
  - Rubyの入門
    [[http://dotinstall.com/lessons/basic_ruby_v2][Ruby入門 (全23回) - プログラミングならドットインストール]]
  - Rubyの記号
    - [[http://docs.ruby-lang.org/ja/2.1.0/class/Kernel.html][module Kernel]]
  - =$LOADED_FEATURES= を説明すると良いのでは
  - [[http://atodekaku.tumblr.com/post/33835003602/gem-2012-10-14-sun][デザイナーの為のgem作成勉強会に参加しました = 2012.10.14.Sun • FIXME]]
  - [[https://rubygems.org/][RubyGems.org | your community gem host]]
  - このページの解説
    - [[http://guides.rubygems.org/rubygems-basics/][RubyGems Basics - RubyGems Guides]]
** TODO 補足資料
*** Travis CI ステータスイメージ
**** Travis CIのテスト結果を分かりやすく共有したい
     - Travis CIのステータスイメージをREADME.mdに埋め込むことができる
       - [[http://docs.travis-ci.com/user/status-images/][Embedding Status Images - Travis CI]]
       - [[http://blog.ruedap.com/2013/09/02/travis-ci-coveralls-code-climate-github-badge][Travis CIとCoverallsとCode Climateを使ってGitHubリポジトリにバッジを付ける - アインシュタインの電話番号]]
